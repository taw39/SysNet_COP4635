#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>

#include <unistd.h> // for read()

#define PORT 7891
#define CONV_LENGTH 4096
/**
 * Requests the user for hame of the http server + name of a file that resides
 * on server. Sends HTTP/1.1 request to the server ofr hte file. This will
 * display all responses received from the httpServer. Connection will be
 * persistent. If the server has stopped working, this will be indicated.
 *
 * @author: Alexander Oldaker
 * @author: Tyler Webb
 * @date:   2018-03-09
 * @info:   COP4635 - Project 1
 */

int main(){
  int welcomeSocket, newSocket;
  char buffer[CONV_LENGTH];
  struct sockaddr_in serverAddr;
  struct sockaddr_storage serverStorage;
  socklen_t addr_size;

  /*---- Create the socket. The three arguments are: ----*/
  /*
   * 1) Internet domain
   * 2) Stream socket
   * 3) Default protocol (TCP in this case)
   */
  welcomeSocket = socket(PF_INET, SOCK_STREAM, 0);

  /*---- Configure settings of the server address struct ----*/
  serverAddr.sin_family      = AF_INET;
  serverAddr.sin_port        = htons(PORT);
  serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

  /*---- Bind the address struct to the socket ----*/
  bind(welcomeSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

  /*---- Listen on the socket, with 5 max connection requests queued ----*/
  if(listen(welcomeSocket,5)==0)
    printf("Listening\n");
  else
    printf("Error\n");

  /*---- Accept call creates a new socket for the incoming connection ----*/
  addr_size = sizeof serverStorage;
  newSocket = accept(welcomeSocket, (struct sockaddr *) &serverStorage, &addr_size);

  // Parse out the recieved http response.
  // read() returns number of bytes read while input contents of newSocket into rString for upto CONV_LENGTH byes
  char rString[CONV_LENGTH];
  int n = read(newSocket, rString, CONV_LENGTH);

  // DEBUG: prints the recieved message and size in bytes
  printf("Number of Bytes read: %d\nRecieved Request: %s\n", n, rString);

  // parse the file requested.
  char *fileName = (char*)malloc(sizeof(char)*CONV_LENGTH);
  char const a[2] = " ";
  strcpy(fileName, strtok(rString, a));
  strcpy(fileName, strtok(NULL, a));
  fileName += 1;  //this gets rid of the '\' in the front of the parsed file name.

  // DEBUG: prints the fileName to be returned
  printf("Requested File: %s\n", fileName);

    // open the file requested
    FILE *fp = fopen(fileName, "r");
    if(fp == NULL)
    {
        fp = fopen("404.html","r");
        snprintf(buffer,sizeof(char)*CONV_LENGTH,"HTTP/1.1 404 Not Found\r\n\r\n");
    }
    else
    {
        char *file = malloc(sizeof(char)*CONV_LENGTH);
        while((fgets(file, CONV_LENGTH, fp)) != NULL);  // put the content of the requested file into the buffer
        snprintf(buffer,sizeof(char)*CONV_LENGTH,"HTTP/1.1 200 OK\r\n\r\n%s",file);
    }

  /*---- Send message to the socket of the incoming connection ----*/
  //strcpy(buffer,"Hello World\n");
  send(newSocket,buffer,strlen(buffer),0);  // changed it so that it sends up to the length of buffer string.

  return 0;
}
